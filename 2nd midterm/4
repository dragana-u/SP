//Еден елемент од матрица ја дели матрицата на 4 квадранти (прикажани на сликата). Притоа самиот елемент кој ја дели матрицата припаѓа во 
//четвртиот квадрант (-5 во примерот на сликата).
//Од стандарден влез се внесува матрица со димензии NxM (1 <= N, M < 100). 
//Потоа се внесуваат два броеви кои претставуваат индекси на еден елемент од матрицата.
//Да се најдат сумите на секој од квадрантите и да се испечатат на стандарен излез. 
//Притоа се печати сумата за првиот квадрант, па за вториот, па третиот и на крај за четвртиот. 
//Доколку не може да се креира квадрант, тогаш за сумата на тој квадрант треба да се испечати 0.

#include <stdio.h>

int main(){
    int n,m;
    int matrix[100][100];
    int a[100];
    int r,k,l;
    scanf("%d %d",&n,&m);
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&matrix[i][j]);
        }
    }
    int indeksI, indeksJ;
    scanf("%d %d",&indeksI,&indeksJ);
    int sumTret=0, sumCetiri=matrix[indeksI][indeksJ];
    for(r=0; r<indeksI; r++)
    {
        for(k=indeksJ; k<m; k++)
            a[0]+=matrix[r][k];
        for(k=0; k<indeksJ; k++)
            a[1]+=matrix[r][k];
    }
    for(i=0;i<n;i++) {
        if (sumCetiri <= matrix[indeksI][indeksJ]) {
            for (j = 0; j < m; j++) {
                if (indeksJ - 1 - j < 0) break;
                sumTret += matrix[indeksI][indeksJ - 1 - j];
                sumTret += matrix[indeksI + 1][indeksJ - 1 - j];
            }
            for (j = 0; j < m; j++) {
                sumCetiri += matrix[indeksI][indeksJ + 1 + j];
                sumCetiri += matrix[indeksI + 1][indeksJ + j];
            }
        }
    }

    for(l=0;l<2;l++) printf("%d ",a[l]);
    printf("%d %d",sumTret,sumCetiri);
}
